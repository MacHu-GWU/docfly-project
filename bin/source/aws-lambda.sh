#!/bin/bash
# -*- coding: utf-8 -*-
#
# AWS Lambda development bash script tools.
#
# This script should be sourced to use.
#
# This file is generated by cookiecutter-pygitrepo {{ cookiecutter._cookiecutter_pygitrepo_version }}: https://github.com/MacHu-GWU/cookiecutter-pygitrepo/tree/{{ cookiecutter._cookiecutter_pygitrepo_version }}

if [ -n "${BASH_SOURCE}" ]
then
    dir_here="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
else
    dir_here="$( cd "$(dirname "$0")" ; pwd -P )"
fi

dir_bin="$(dirname "${dir_here}")"
dir_project_root=$(dirname "${dir_bin}")

source "${dir_bin}/source/bash-helpers.sh"


# Build AWS Lambda source code zip file
build_lbd_source_code() {
    python "${dir_bin}/pgr/pygitrepo_func.py" "build_lbd_source"
}

# Upload AWS Lambda source code zip file to S3
upload_lbd_source_code() {
    aws_cli_profile_arg_lambda_deploy="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_CLI_PROFILE_ARG_LAMBDA_DEPLOY")"

    path_lambda_build_source="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_LAMBDA_BUILD_SOURCE")"
    s3_uri_lambda_deploy_versioned_source_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "S3_URI_LAMBDA_DEPLOY_VERSIONED_SOURCE_DIR")"
    url_s3_console_lambda_deploy_versioned_source_obj="$(python "${dir_bin}/pgr/pygitrepo.py" "URL_S3_CONSOLE_LAMBDA_DEPLOY_VERSIONED_SOURCE_OBJ")"

    pprint "[pygitrepo] {FORE_CYAN}upload lambda source code from {STYLE_RESET_ALL}${path_lambda_build_source} {FORE_CYAN}to {STYLE_RESET_ALL}${s3_uri_lambda_deploy_versioned_source_dir} ..."
    if [ -e "${path_lambda_build_source}" ]; then
        source_md5="$(python "${dir_bin}/pgr/pygitrepo_md5.py" "${path_lambda_build_source}")"
        aws s3 cp "${path_lambda_build_source}" "${s3_uri_lambda_deploy_versioned_source_dir}${source_md5}.zip"\
            --profile "${aws_cli_profile_arg_lambda_deploy}"
        echo "open ${url_s3_console_lambda_deploy_versioned_source_obj}/${source_md5}.zip to preview"
        pprint "[pygitrepo] {FORE_CYAN}  done"
    else
        pprint "[pygitrepo] {FORE_RED}  ${path_lambda_build_source} {FORE_CYAN} not found"
    fi
}

# This function should only be called in a amazon-linux container
# create virtualenv and pip install the current package (including dependencies)
container_only_install_lbd_dependency() {
    dir_venv="$(python "${dir_bin}/pgr/pygitrepo.py" "DIR_VENV")"
    bin_pip="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_VENV_BIN_PIP")"

    pprint "[pygitrepo] {FORE_CYAN}create virtualenv at {STYLE_RESET_ALL}${dir_venv} {FORE_CYAN}in container ..."
    virtualenv "${dir_venv}"

    pprint "[pygitrepo] {FORE_CYAN}pip install dependencies ..."
    "${bin_pip}" install ${dir_project_root}
}

# This function should only be called in a amazon-linux container
# It just install the dependencies, zip everything needed,
# and put the zip file in the right place.
container_only_build_lbd_layer() {
    container_only_install_lbd_dependency

    python "${dir_bin}/pgr/pygitrepo_func.py" "build_lbd_layer"
}


# Build lambda layer using a AWS lambda runtime compatible docker image
# It basically run the docker container, and run the build lambda layer
# shell script in the docker container.
build_lbd_layer() {
    aws_lambda_build_docker_image="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_LAMBDA_BUILD_DOCKER_IMAGE")"
    aws_lambda_build_docker_image_workspace_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_LAMBDA_BUILD_DOCKER_IMAGE_WORKSPACE_DIR")"
    container_only_build_lbd_layer_script_path="${aws_lambda_build_docker_image_workspace_dir}/bin/lbd/container-only-build-lbd-layer.sh"

    pprint "[pygitrepo] {FORE_CYAN}build lambda layer in {STYLE_RESET_ALL}${aws_lambda_build_docker_image} {FORE_CYAN}docker container ..."
    mkdir_if_not_exists "${dir_lambda_build}"
    docker run -v "${dir_project_root}":"${aws_lambda_build_docker_image_workspace_dir}" --rm "${aws_lambda_build_docker_image}" bash "${container_only_build_lbd_layer_script_path}"
}

# Upload AWS Lambda layer zip file to S3
upload_lbd_layer() {
    aws_cli_profile_arg_lambda_deploy="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_CLI_PROFILE_ARG_LAMBDA_DEPLOY")"

    path_lambda_build_layer="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_LAMBDA_BUILD_LAYER")"
    s3_uri_lambda_deploy_versioned_layer_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "S3_URI_LAMBDA_DEPLOY_VERSIONED_LAYER_DIR")"
    url_s3_console_lambda_deploy_versioned_layer_obj="$(python "${dir_bin}/pgr/pygitrepo.py" "URL_S3_CONSOLE_LAMBDA_DEPLOY_VERSIONED_LAYER_OBJ")"

    pprint "[pygitrepo] {FORE_CYAN}upload lambda layer from {STYLE_RESET_ALL}${path_lambda_build_layer} {FORE_CYAN}to {STYLE_RESET_ALL}${s3_uri_lambda_deploy_versioned_layer_dir} ..."
    if [ -e "${path_lambda_build_layer}" ]; then
        source_md5="$(python "${dir_bin}/pgr/pygitrepo_md5.py" "${path_lambda_build_layer}")"
        aws s3 cp "${path_lambda_build_layer}" "${s3_uri_lambda_deploy_versioned_layer_dir}${source_md5}.zip"\
            --profile "${aws_cli_profile_arg_lambda_deploy}"
        echo "open ${url_s3_console_lambda_deploy_versioned_layer_obj}/${source_md5}.zip to preview"
        pprint "[pygitrepo] {FORE_CYAN}  done"
    else
        pprint "[pygitrepo] {FORE_RED}  ${path_lambda_build_layer} {FORE_CYAN} not found"
    fi
}


# This function should only be called in a amazon-linux container
# It just install the dependencies, zip everything needed,
# and put the zip file in the right place.
container_only_build_lbd_deploy_pkg() {
    container_only_install_lbd_dependency

    python "${dir_bin}/pgr/pygitrepo_func.py" "build_lbd_deploy_package"
}


# Build lambda deployment package using a AWS lambda runtime compatible docker image
# It basically run the docker container, and run the build lambda deployment package
# shell script in the docker container.
build_lbd_deploy_pkg() {
    aws_lambda_build_docker_image="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_LAMBDA_BUILD_DOCKER_IMAGE")"
    aws_lambda_build_docker_image_workspace_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_LAMBDA_BUILD_DOCKER_IMAGE_WORKSPACE_DIR")"
    container_only_build_lbd_deploy_pkg_script_path="${aws_lambda_build_docker_image_workspace_dir}/bin/lbd/container-only-build-lbd-deploy-pkg.sh"

    pprint "[pygitrepo] {FORE_CYAN}build lambda layer in {STYLE_RESET_ALL}${aws_lambda_build_docker_image} {FORE_CYAN}docker container ..."
    docker run -v "${dir_project_root}":"${aws_lambda_build_docker_image_workspace_dir}" --rm "${aws_lambda_build_docker_image}" bash "${container_only_build_lbd_deploy_pkg_script_path}"
}


# Upload AWS Lambda deployment package zip file to S3
upload_lbd_deploy_pkg() {
    aws_cli_profile_arg_lambda_deploy="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_CLI_PROFILE_ARG_LAMBDA_DEPLOY")"

    path_lambda_build_deploy_pkg="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_LAMBDA_BUILD_DEPLOY_PACKAGE")"
    s3_uri_lambda_deploy_versioned_deploy_pkg_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "S3_URI_LAMBDA_DEPLOY_VERSIONED_DEPLOY_PKG_DIR")"
    url_s3_console_lambda_deploy_versioned_deploy_pkg_obj="$(python "${dir_bin}/pgr/pygitrepo.py" "URL_S3_CONSOLE_LAMBDA_DEPLOY_VERSIONED_DEPLOY_PKG_OBJ")"

    pprint "[pygitrepo] {FORE_CYAN}upload lambda deployment package from {STYLE_RESET_ALL}${path_lambda_build_deploy_pkg} {FORE_CYAN}to {STYLE_RESET_ALL}${s3_uri_lambda_deploy_versioned_deploy_pkg_dir} ..."
    if [ -e "${path_lambda_build_deploy_pkg}" ]; then
        source_md5="$(python "${dir_bin}/pgr/pygitrepo_md5.py" "${path_lambda_build_deploy_pkg}")"
        aws s3 cp "${path_lambda_build_deploy_pkg}" "${s3_uri_lambda_deploy_versioned_deploy_pkg_dir}${source_md5}.zip"\
            --profile "${aws_cli_profile_arg_lambda_deploy}"
        echo "open ${url_s3_console_lambda_deploy_versioned_deploy_pkg_obj}/${source_md5}.zip to preview"
        pprint "[pygitrepo] {FORE_CYAN}  done"
    else
        pprint "[pygitrepo] {FORE_RED}  ${path_lambda_build_deploy_pkg} {FORE_CYAN} not found"
    fi
}


# This function should only be called in a amazon-linux container
# It just install the dependencies, zip everything needed,
# and put the zip file in the right place.
container_only_build_lbd_everything() {
    container_only_install_lbd_dependency

    python "${dir_bin}/pgr/pygitrepo_func.py" "build_lbd_layer"
    python "${dir_bin}/pgr/pygitrepo_func.py" "build_lbd_deploy_package"
}


# Build lambda source code, layer, deployment package using a
# AWS lambda runtime compatible docker image.
# It basically run the docker container, and run the build lambda deployment package
# shell script in the docker container.
build_lbd_everything() {
    aws_lambda_build_docker_image="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_LAMBDA_BUILD_DOCKER_IMAGE")"
    aws_lambda_build_docker_image_workspace_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_LAMBDA_BUILD_DOCKER_IMAGE_WORKSPACE_DIR")"
    container_only_build_lbd_everything_script_path="${aws_lambda_build_docker_image_workspace_dir}/bin/lbd/container-only-build-lbd-everything.sh"

    pprint "[pygitrepo] {FORE_CYAN}build lambda source, layer and deployment package in {STYLE_RESET_ALL}${aws_lambda_build_docker_image} {FORE_CYAN}docker container ..."
    build_lbd_source_code
    docker run -v "${dir_project_root}":"${aws_lambda_build_docker_image_workspace_dir}" --rm "${aws_lambda_build_docker_image}" bash "${container_only_build_lbd_everything_script_path}"
}

# Upload AWS Lambda source code, layer, deployment package zip file to S3
upload_lbd_everything() {
    s3_uri_lambda_deploy_versioned_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "S3_URI_LAMBDA_DEPLOY_VERSIONED_DIR")"

    pprint "[pygitrepo] {FORE_CYAN}upload lambda source, layer and deployment package to ${s3_uri_lambda_deploy_versioned_dir} ..."
    upload_lbd_source_code
    upload_lbd_layer
    upload_lbd_deploy_pkg
}

# Deploy recently built AWS lambda layer
deploy_lbd_layer() {
    package_name="$(python "${dir_bin}/pgr/pygitrepo.py" "PACKAGE_NAME")"
    aws_cli_profile_arg_lambda_deploy="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_CLI_PROFILE_ARG_LAMBDA_DEPLOY")"

    dev_py_ver_major="$(python "${dir_bin}/pgr/pygitrepo.py" "DEV_PY_VER_MAJOR")"
    dev_py_ver_minor="$(python "${dir_bin}/pgr/pygitrepo.py" "DEV_PY_VER_MINOR")"

    path_lambda_build_layer="$(python "${dir_bin}/pgr/pygitrepo.py" "PATH_LAMBDA_BUILD_LAYER")"
    aws_lambda_deploy_s3_bucket="$(python "${dir_bin}/pgr/pygitrepo.py" "AWS_LAMBDA_DEPLOY_S3_BUCKET")"
    s3_key_lambda_deploy_versioned_layer_dir="$(python "${dir_bin}/pgr/pygitrepo.py" "S3_KEY_LAMBDA_DEPLOY_VERSIONED_LAYER_DIR")"
    url_s3_console_lambda_deploy_versioned_layer_obj="$(python "${dir_bin}/pgr/pygitrepo.py" "URL_S3_CONSOLE_LAMBDA_DEPLOY_VERSIONED_LAYER_OBJ")"

    url_lbd_layer_console="$(python "${dir_bin}/pgr/pygitrepo.py" "URL_LBD_LAYER_CONSOLE")"

    pprint "[pygitrepo] {FORE_CYAN}deploy a new version of lambda layer ..."
    if [ -e "${path_lambda_build_layer}" ]; then
        source_md5="$(python "${dir_bin}/pgr/pygitrepo_md5.py" "${path_lambda_build_layer}")"
        echo "open ${url_s3_console_lambda_deploy_versioned_layer_obj}/${source_md5}.zip to inspect layer artifacts on s3"
        pprint "[pygitrepo] {FORE_CYAN}  run {STYLE_RESET_ALL}aws lambda publish-layer-version {FORE_CYAN}command ..."
        aws lambda publish-layer-version \
            --layer-name "${package_name}" \
            --description "dependency layer for all functions in ${package_name}" \
            --content "S3Bucket=${aws_lambda_deploy_s3_bucket},S3Key=${s3_key_lambda_deploy_versioned_layer_dir}${source_md5}.zip" \
            --compatible-runtimes "python${dev_py_ver_major}.${dev_py_ver_minor}" \
            --profile "${aws_cli_profile_arg_lambda_deploy}"
        echo "open ${url_lbd_layer_console} to view layer"
    else
        pprint "[pygitrepo] {FORE_RED} cannot find {STYLE_RESET_ALL}${path_lambda_build_layer}"
    fi
}
